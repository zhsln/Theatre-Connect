{
	"info": {
		"_postman_id": "dde057b0-0145-4306-a874-46bb49c9f71a",
		"name": "Theatre-Connect",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33071539"
	},
	"item": [
		{
			"name": "User requests",
			"item": [
				{
					"name": "createUser",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"erasyl\",\r\n    \"password\": \"awdawd\",\r\n    \"name\": \"era\",\r\n    \"surname\": \"aeawd\",\r\n    \"editor\": false,\r\n    \"manager\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserById",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/50",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"50"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllUsers",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getEditors",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/editors/",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"editors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getManagers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/managers/",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"managers",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserBySurname",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/surname/Amantur",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"surname",
								"Amantur"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateUser",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"Erikosh\",\r\n    \"password\": \"qwertyu\",\r\n    \"name\": \"Erasyl\",\r\n    \"surname\": \"Erkin\",\r\n    \"editor\": true,\r\n    \"manager\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/update/50",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"update",
								"50"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteUserById",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/50",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"50"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Performance requests",
			"item": [
				{
					"name": "createPerformance",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Swan Lake\",\r\n    \"date\": \"2024-10-23\",\r\n    \"time\": \"19:00:00+10:00\",\r\n    \"duration\": \"120\",\r\n    \"venue\": \"The State Opera and Ballet Theatre 'Astana Opera'\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/performances/",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"performances",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllPerformances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Title</th>\r",
									"        <th>Date</th>\r",
									"        <th>Time</th>\r",
									"        <th>Duration</th>\r",
									"        <th>Venue</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response}}\r",
									"        <tr>\r",
									"            <td>{{id}}</td>\r",
									"            <td>{{title}}</td>\r",
									"            <td>{{date}}</td>\r",
									"            <td>{{time}}</td>\r",
									"            <td>{{duration}}</td>\r",
									"            <td>{{venue}}</td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return {response: pm.response.json()}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/performances/",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"performances",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceById",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/performances/15",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"performances",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByDate",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/performances/date/2024-10-24",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"performances",
								"date",
								"2024-10-24"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByTitle",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "updatePerformance",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Swan Lake\",\r\n    \"date\": \"2024-02-23\",\r\n    \"time\": \"17:30:00+06:00\",\r\n    \"duration\": 120,\r\n    \"venue\": \"The State Opera and Ballet Theatre 'Astana Opera'\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/performances/update/15",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"performances",
								"update",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePerformance",
					"request": {
						"method": "DELETE",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking requests",
			"item": [
				{
					"name": "createBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response content type is 'text/xml'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/xml\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is null\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    \r",
									"    pm.expect(responseData).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the response body is in a valid XML format\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    \r",
									"    pm.expect(responseData).to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the response contains a descriptive error message\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('error').that.is.a('string').and.not.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\": {\r\n        \"id\": 53\r\n    },\r\n    \"performance\": {\r\n        \"id\": 21\r\n    },\r\n    \"seatNumber\": \"Parterre: Row 13, Seat 11\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/bookings/",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"bookings",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getBookingById",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "getAllBookings",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "getByUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Booking ID</th>\r",
									"        <th>User ID</th>\r",
									"        <th>User Name</th>\r",
									"        <th>User Surname</th>\r",
									"        <th>Performance Title</th>\r",
									"        <th>Date</th>\r",
									"        <th>Time</th>\r",
									"        <th>Venue</th>\r",
									"        <th>Seat Number</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response}}\r",
									"        <tr>\r",
									"            <td>{{bookingId}}</td>\r",
									"            <td>{{user.id}}</td>\r",
									"            <td>{{user.name}}</td>\r",
									"            <td>{{user.surname}}</td>\r",
									"            <td>{{performance.title}}</td>\r",
									"            <td>{{performance.date}}</td>\r",
									"            <td>{{performance.time}}</td>\r",
									"            <td>{{performance.venue}}</td>\r",
									"            <td>{{seat_number}}</td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/bookings/user/45",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"bookings",
								"user",
								"45"
							]
						}
					},
					"response": []
				},
				{
					"name": "getByPerformanceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Booking ID</th>\r",
									"        <th>User ID</th>\r",
									"        <th>User Name</th>\r",
									"        <th>User Surname</th>\r",
									"        <th>Performance Title</th>\r",
									"        <th>Date</th>\r",
									"        <th>Time</th>\r",
									"        <th>Venue</th>\r",
									"        <th>Seat Number</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response}}\r",
									"        <tr>\r",
									"            <td>{{bookingId}}</td>\r",
									"            <td>{{user.id}}</td>\r",
									"            <td>{{user.name}}</td>\r",
									"            <td>{{user.surname}}</td>\r",
									"            <td>{{performance.title}}</td>\r",
									"            <td>{{performance.date}}</td>\r",
									"            <td>{{performance.time}}</td>\r",
									"            <td>{{performance.venue}}</td>\r",
									"            <td>{{seat_number}}</td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/bookings/performance/20",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"bookings",
								"performance",
								"20"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateBookings",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\": {\r\n        \"id\": 52\r\n    },\r\n    \"performance\": {\r\n        \"id\": 21\r\n    },\r\n    \"seatNumber\": \"Balcony A: Row 2, Seat 5\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/bookings/update/45",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"bookings",
								"update",
								"45"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteBooking",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/bookings/33",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"bookings",
								"33"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}